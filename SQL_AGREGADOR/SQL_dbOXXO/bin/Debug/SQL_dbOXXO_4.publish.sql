/*
Deployment script for dbOXXO

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "dbOXXO"
:setvar DefaultFilePrefix "dbOXXO"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS2017\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS2017\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                ARITHABORT OFF,
                CONCAT_NULL_YIELDS_NULL OFF,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT OFF,
                CURSOR_DEFAULT GLOBAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY CHECKSUM,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 60 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = AUTO, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 30), MAX_STORAGE_SIZE_MB = 1000) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [agr]...';


GO
CREATE SCHEMA [agr]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [swt]...';


GO
CREATE SCHEMA [swt]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [agr].[REFERENCIA]...';


GO
CREATE TABLE [agr].[REFERENCIA] (
    [numIdReferencia]      NUMERIC (15)   IDENTITY (1, 1) NOT NULL,
    [numDifReferencia]     NUMERIC (20)   NOT NULL,
    [intIdProcessControl]  NUMERIC (15)   NOT NULL,
    [numNoTransaccion]     NUMERIC (32)   NOT NULL,
    [chrIdMoneda]          CHAR (3)       NOT NULL,
    [sntIdEstablecimiento] SMALLINT       NOT NULL,
    [sntIdCliente]         SMALLINT       NOT NULL,
    [varNoBeneficiario]    VARCHAR (26)   NOT NULL,
    [decMonto]             DECIMAL (8, 2) NOT NULL,
    [numNoReferencia]      NUMERIC (16)   NOT NULL,
    [sdtFecExpiracion]     SMALLDATETIME  NOT NULL,
    [sdtFecRegistro]       SMALLDATETIME  NOT NULL,
    [varURLQR]             VARCHAR (140)  NULL,
    [varJSON]              VARCHAR (600)  NULL,
    [tnyIdEstatus]         TINYINT        NOT NULL,
    CONSTRAINT [PK_numIdReferencia_REF] PRIMARY KEY CLUSTERED ([numIdReferencia] ASC),
    CONSTRAINT [UQ_numDifReferencia_REF] UNIQUE NONCLUSTERED ([numDifReferencia] ASC)
);


GO
PRINT N'Creating [agr].[REFERENCIA].[IX_NC_COMB_X1]...';


GO
CREATE NONCLUSTERED INDEX [IX_NC_COMB_X1]
    ON [agr].[REFERENCIA]([tnyIdEstatus] ASC, [sdtFecExpiracion] ASC)
    INCLUDE([numIdReferencia], [intIdProcessControl], [numNoTransaccion], [chrIdMoneda], [varNoBeneficiario], [decMonto], [numNoReferencia], [sdtFecRegistro], [varURLQR], [varJSON], [sntIdEstablecimiento], [sntIdCliente]);


GO
PRINT N'Creating [agr].[REFERENCIA].[IX_NC_numNoReferencia_X3]...';


GO
CREATE NONCLUSTERED INDEX [IX_NC_numNoReferencia_X3]
    ON [agr].[REFERENCIA]([numNoReferencia] ASC)
    INCLUDE([numIdReferencia], [intIdProcessControl], [numNoTransaccion], [chrIdMoneda], [sntIdEstablecimiento], [sdtFecRegistro], [varURLQR], [varJSON], [tnyIdEstatus], [sntIdCliente], [varNoBeneficiario], [decMonto], [sdtFecExpiracion]);


GO
PRINT N'Creating [agr].[REFERENCIA].[IX_NC_sntIdEstablecimiento_X2]...';


GO
CREATE NONCLUSTERED INDEX [IX_NC_sntIdEstablecimiento_X2]
    ON [agr].[REFERENCIA]([sntIdEstablecimiento] ASC)
    INCLUDE([numIdReferencia], [intIdProcessControl], [numNoTransaccion], [chrIdMoneda], [sntIdCliente], [numNoReferencia], [sdtFecExpiracion], [sdtFecRegistro], [varURLQR], [varJSON], [tnyIdEstatus], [varNoBeneficiario], [decMonto]);


GO
PRINT N'Creating [agr].[REFERENCIA].[IX_NC_numDifReferencia_X4]...';


GO
CREATE NONCLUSTERED INDEX [IX_NC_numDifReferencia_X4]
    ON [agr].[REFERENCIA]([numDifReferencia] ASC)
    INCLUDE([numIdReferencia], [intIdProcessControl], [numNoTransaccion], [chrIdMoneda], [sntIdEstablecimiento], [varURLQR], [varJSON], [tnyIdEstatus], [sntIdCliente], [varNoBeneficiario], [decMonto], [numNoReferencia], [sdtFecExpiracion], [sdtFecRegistro]);


GO
PRINT N'Creating [agr].[VALIDACION]...';


GO
CREATE TABLE [agr].[VALIDACION] (
    [numIdValidacion] NUMERIC (3)  IDENTITY (100, 1) NOT NULL,
    [varDescrip]      VARCHAR (60) NOT NULL,
    [chrCodError]     CHAR (2)     NOT NULL,
    CONSTRAINT [PK_IdValidacion_VAL] PRIMARY KEY CLUSTERED ([numIdValidacion] ASC)
);


GO
PRINT N'Creating [agr].[PROCESSERROR]...';


GO
CREATE TABLE [agr].[PROCESSERROR] (
    [intIdProcessError]   INT           IDENTITY (1, 1) NOT NULL,
    [intIdProcessControl] NUMERIC (15)  NOT NULL,
    [numIdValidacion]     NUMERIC (3)   NOT NULL,
    [varMensaje]          VARCHAR (120) NOT NULL,
    [chrCodError]         CHAR (2)      NOT NULL,
    [FecRegistro]         SMALLDATETIME NOT NULL,
    CONSTRAINT [PK_intIdProcessError_PRE] PRIMARY KEY CLUSTERED ([intIdProcessError] ASC)
);


GO
PRINT N'Creating [agr].[PROCESSCONTROL]...';


GO
CREATE TABLE [agr].[PROCESSCONTROL] (
    [intIdProcessControl] NUMERIC (15)   IDENTITY (1, 1) NOT NULL,
    [nvarJSON]            NVARCHAR (MAX) NOT NULL,
    [tnyIdOrigen]         TINYINT        NOT NULL,
    [sdtFecRegistro]      SMALLDATETIME  NOT NULL,
    CONSTRAINT [PK_intIdProcessControl_PRO] PRIMARY KEY CLUSTERED ([intIdProcessControl] ASC)
);


GO
PRINT N'Creating [agr].[ORIGEN]...';


GO
CREATE TABLE [agr].[ORIGEN] (
    [tnyIdOrigen] TINYINT      IDENTITY (1, 1) NOT NULL,
    [varDescrip]  VARCHAR (30) NULL,
    CONSTRAINT [PK_tnyIdOrigen_ORI] PRIMARY KEY CLUSTERED ([tnyIdOrigen] ASC)
);


GO
PRINT N'Creating [agr].[NIVEL]...';


GO
CREATE TABLE [agr].[NIVEL] (
    [tnyIdNivel] TINYINT      NOT NULL,
    [varDescrip] VARCHAR (36) NOT NULL,
    CONSTRAINT [PK_tnyIdNivel_NIV] PRIMARY KEY CLUSTERED ([tnyIdNivel] ASC)
);


GO
PRINT N'Creating [agr].[MONEDA]...';


GO
CREATE TABLE [agr].[MONEDA] (
    [chrIdMoneda] CHAR (3)     NOT NULL,
    [varDescrip]  VARCHAR (26) NOT NULL,
    CONSTRAINT [PK_chrIdMoneda_MON] PRIMARY KEY CLUSTERED ([chrIdMoneda] ASC)
);


GO
PRINT N'Creating [agr].[ESTATUS]...';


GO
CREATE TABLE [agr].[ESTATUS] (
    [tnyIdEstatus] TINYINT      IDENTITY (1, 1) NOT NULL,
    [varDescrip]   VARCHAR (46) NOT NULL,
    CONSTRAINT [PK_tnyIdEstatus_EST] PRIMARY KEY CLUSTERED ([tnyIdEstatus] ASC)
);


GO
PRINT N'Creating [agr].[ESTABLECIMIENTO]...';


GO
CREATE TABLE [agr].[ESTABLECIMIENTO] (
    [sntIdEstablecimiento]  SMALLINT     IDENTITY (1, 1) NOT NULL,
    [varCodEstablecimiento] VARCHAR (12) NOT NULL,
    [varDescrip]            VARCHAR (32) NOT NULL,
    [intNoSocio]            INT          NULL,
    CONSTRAINT [PK_sntIdEstablecimiento_EST] PRIMARY KEY CLUSTERED ([sntIdEstablecimiento] ASC)
);


GO
PRINT N'Creating [agr].[ESTABLECIMIENTO].[IX_NC_varCodEstablecimiento_X1]...';


GO
CREATE NONCLUSTERED INDEX [IX_NC_varCodEstablecimiento_X1]
    ON [agr].[ESTABLECIMIENTO]([varCodEstablecimiento] ASC)
    INCLUDE([sntIdEstablecimiento], [varDescrip], [intNoSocio]);


GO
PRINT N'Creating [agr].[CONFVALIDACIONES]...';


GO
CREATE TABLE [agr].[CONFVALIDACIONES] (
    [numIdConfValidacion] NUMERIC (3)   IDENTITY (1, 1) NOT NULL,
    [sntIdCliente]        SMALLINT      NULL,
    [numIdValidacion]     NUMERIC (3)   NULL,
    [tnyIdNivel]          TINYINT       NOT NULL,
    [varScriptSQL]        VARCHAR (MAX) NOT NULL,
    [bitIsActivo]         BIT           NOT NULL,
    CONSTRAINT [PK_numIdConfValidacion_CVA] PRIMARY KEY CLUSTERED ([numIdConfValidacion] ASC)
);


GO
PRINT N'Creating [agr].[CONFVALIDACIONES].[IX_NC_COMB_X1]...';


GO
CREATE NONCLUSTERED INDEX [IX_NC_COMB_X1]
    ON [agr].[CONFVALIDACIONES]([tnyIdNivel] ASC, [bitIsActivo] ASC)
    INCLUDE([numIdConfValidacion], [sntIdCliente], [numIdValidacion], [varScriptSQL]);


GO
PRINT N'Creating [agr].[CONFIGURACION]...';


GO
CREATE TABLE [agr].[CONFIGURACION] (
    [sntIdConfiguracion] SMALLINT     IDENTITY (1, 1) NOT NULL,
    [varDescrip]         VARCHAR (60) NOT NULL,
    CONSTRAINT [PK_IdConfiguracion_CON] PRIMARY KEY CLUSTERED ([sntIdConfiguracion] ASC)
);


GO
PRINT N'Creating [agr].[CONFIG_NIVEL_ESTABLECIMIENTO]...';


GO
CREATE TABLE [agr].[CONFIG_NIVEL_ESTABLECIMIENTO] (
    [intIdConNivEstable]   INT          IDENTITY (1, 1) NOT NULL,
    [sntIdEstablecimiento] SMALLINT     NOT NULL,
    [tnyNivel]             TINYINT      NOT NULL,
    [Descrip]              VARCHAR (20) NOT NULL,
    CONSTRAINT [PK_intIdRegistro_CNE] PRIMARY KEY CLUSTERED ([intIdConNivEstable] ASC)
);


GO
PRINT N'Creating [agr].[CONFIG_NIVEL_ESTABLECIMIENTO].[IX_sntIdEstablecimiento_X1]...';


GO
CREATE NONCLUSTERED INDEX [IX_sntIdEstablecimiento_X1]
    ON [agr].[CONFIG_NIVEL_ESTABLECIMIENTO]([sntIdEstablecimiento] ASC)
    INCLUDE([intIdConNivEstable], [tnyNivel], [Descrip]);


GO
PRINT N'Creating [agr].[CONFIG_COL_ESTABLECIMIENTO]...';


GO
CREATE TABLE [agr].[CONFIG_COL_ESTABLECIMIENTO] (
    [intIdConColEstable]   INT           IDENTITY (1, 1) NOT NULL,
    [intIdConNivEstable]   INT           NULL,
    [sntIdEstablecimiento] SMALLINT      NOT NULL,
    [tnyOrden]             TINYINT       NOT NULL,
    [varColumna]           VARCHAR (25)  NOT NULL,
    [varTipoDato]          VARCHAR (50)  NOT NULL,
    [varValor]             VARCHAR (200) NULL,
    CONSTRAINT [PK_intIdConColEstable_CCE] PRIMARY KEY CLUSTERED ([intIdConColEstable] ASC)
);


GO
PRINT N'Creating [agr].[CONFIG_COL_ESTABLECIMIENTO].[IX_sntIdEstablecimiento_X1]...';


GO
CREATE NONCLUSTERED INDEX [IX_sntIdEstablecimiento_X1]
    ON [agr].[CONFIG_COL_ESTABLECIMIENTO]([sntIdEstablecimiento] ASC)
    INCLUDE([intIdConColEstable], [intIdConNivEstable], [tnyOrden], [varColumna], [varTipoDato]);


GO
PRINT N'Creating [agr].[CONFIG_CLIENTE]...';


GO
CREATE TABLE [agr].[CONFIG_CLIENTE] (
    [intIdRegistro]      INT           IDENTITY (1, 1) NOT NULL,
    [sntIdCliente]       SMALLINT      NOT NULL,
    [sntIdConfiguracion] SMALLINT      NOT NULL,
    [varValor]           VARCHAR (200) NOT NULL,
    [varMsgError]        VARCHAR (60)  NULL,
    CONSTRAINT [PK_IdRegistro_COC] PRIMARY KEY CLUSTERED ([intIdRegistro] ASC)
);


GO
PRINT N'Creating [agr].[LVAL]...';


GO
CREATE TABLE [agr].[LVAL] (
    [numIdLval]  NUMERIC (3)   IDENTITY (1, 1) NOT NULL,
    [varDescrip] VARCHAR (60)  NOT NULL,
    [varValor]   VARCHAR (60)  NULL,
    [varMensaje] VARCHAR (130) NULL,
    CONSTRAINT [PK_IdLval_LVA] PRIMARY KEY CLUSTERED ([numIdLval] ASC)
);


GO
PRINT N'Creating [agr].[CLIENTE]...';


GO
CREATE TABLE [agr].[CLIENTE] (
    [sntIdCliente]   SMALLINT      IDENTITY (1, 1) NOT NULL,
    [varGUIDCliente] VARCHAR (46)  NOT NULL,
    [varDescrip]     VARCHAR (100) NOT NULL,
    [bitIsRegulada]  BIT           NOT NULL,
    [sdtFecAlta]     SMALLDATETIME NOT NULL,
    [URLAPI]         VARCHAR (400) NULL,
    [UserAPI]        VARCHAR (50)  NULL,
    [PassAPI]        VARCHAR (50)  NULL,
    [bitIsActivo]    BIT           NOT NULL,
    CONSTRAINT [PK_IdCliente_CLI] PRIMARY KEY CLUSTERED ([sntIdCliente] ASC)
);


GO
PRINT N'Creating [agr].[CLIENTE].[IX_NC_varGUIDCliente_X1]...';


GO
CREATE NONCLUSTERED INDEX [IX_NC_varGUIDCliente_X1]
    ON [agr].[CLIENTE]([varGUIDCliente] ASC)
    INCLUDE([sntIdCliente], [varDescrip], [bitIsRegulada], [sdtFecAlta], [bitIsActivo]);


GO
PRINT N'Creating [dbo].[__MigrationHistory]...';


GO
CREATE TABLE [dbo].[__MigrationHistory] (
    [MigrationId]    NVARCHAR (150)  NOT NULL,
    [ContextKey]     NVARCHAR (300)  NOT NULL,
    [Model]          VARBINARY (MAX) NOT NULL,
    [ProductVersion] NVARCHAR (32)   NOT NULL,
    CONSTRAINT [PK_dbo.__MigrationHistory] PRIMARY KEY CLUSTERED ([MigrationId] ASC, [ContextKey] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetRoles]...';


GO
CREATE TABLE [dbo].[AspNetRoles] (
    [Id]   NVARCHAR (128) NOT NULL,
    [Name] NVARCHAR (256) NOT NULL,
    CONSTRAINT [PK_dbo.AspNetRoles] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetRoles].[RoleNameIndex]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [RoleNameIndex]
    ON [dbo].[AspNetRoles]([Name] ASC);


GO
PRINT N'Creating [dbo].[AspNetUserClaims]...';


GO
CREATE TABLE [dbo].[AspNetUserClaims] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [UserId]     NVARCHAR (128) NOT NULL,
    [ClaimType]  NVARCHAR (MAX) NULL,
    [ClaimValue] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_dbo.AspNetUserClaims] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetUserClaims].[IX_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_UserId]
    ON [dbo].[AspNetUserClaims]([UserId] ASC);


GO
PRINT N'Creating [dbo].[AspNetUserLogins]...';


GO
CREATE TABLE [dbo].[AspNetUserLogins] (
    [LoginProvider] NVARCHAR (128) NOT NULL,
    [ProviderKey]   NVARCHAR (128) NOT NULL,
    [UserId]        NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_dbo.AspNetUserLogins] PRIMARY KEY CLUSTERED ([LoginProvider] ASC, [ProviderKey] ASC, [UserId] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetUserLogins].[IX_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_UserId]
    ON [dbo].[AspNetUserLogins]([UserId] ASC);


GO
PRINT N'Creating [dbo].[AspNetUserRoles]...';


GO
CREATE TABLE [dbo].[AspNetUserRoles] (
    [UserId] NVARCHAR (128) NOT NULL,
    [RoleId] NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_dbo.AspNetUserRoles] PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetUserRoles].[IX_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_UserId]
    ON [dbo].[AspNetUserRoles]([UserId] ASC);


GO
PRINT N'Creating [dbo].[AspNetUserRoles].[IX_RoleId]...';


GO
CREATE NONCLUSTERED INDEX [IX_RoleId]
    ON [dbo].[AspNetUserRoles]([RoleId] ASC);


GO
PRINT N'Creating [dbo].[AspNetUsers]...';


GO
CREATE TABLE [dbo].[AspNetUsers] (
    [Id]                   NVARCHAR (128) NOT NULL,
    [Email]                NVARCHAR (256) NULL,
    [EmailConfirmed]       BIT            NOT NULL,
    [PasswordHash]         NVARCHAR (MAX) NULL,
    [SecurityStamp]        NVARCHAR (MAX) NULL,
    [PhoneNumber]          NVARCHAR (MAX) NULL,
    [PhoneNumberConfirmed] BIT            NOT NULL,
    [TwoFactorEnabled]     BIT            NOT NULL,
    [LockoutEndDateUtc]    DATETIME       NULL,
    [LockoutEnabled]       BIT            NOT NULL,
    [AccessFailedCount]    INT            NOT NULL,
    [UserName]             NVARCHAR (256) NOT NULL,
    CONSTRAINT [PK_dbo.AspNetUsers] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetUsers].[UserNameIndex]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UserNameIndex]
    ON [dbo].[AspNetUsers]([UserName] ASC);


GO
PRINT N'Creating [agr].[DF_FecRegistro_REF]...';


GO
ALTER TABLE [agr].[REFERENCIA]
    ADD CONSTRAINT [DF_FecRegistro_REF] DEFAULT (getdate()) FOR [sdtFecRegistro];


GO
PRINT N'Creating [agr].[DF_FecRegistro_PRE]...';


GO
ALTER TABLE [agr].[PROCESSERROR]
    ADD CONSTRAINT [DF_FecRegistro_PRE] DEFAULT (getdate()) FOR [FecRegistro];


GO
PRINT N'Creating [agr].[DF_sdtFecRegistro_PRO]...';


GO
ALTER TABLE [agr].[PROCESSCONTROL]
    ADD CONSTRAINT [DF_sdtFecRegistro_PRO] DEFAULT (getdate()) FOR [sdtFecRegistro];


GO
PRINT N'Creating [agr].[DF_bitIsActivo_CVA]...';


GO
ALTER TABLE [agr].[CONFVALIDACIONES]
    ADD CONSTRAINT [DF_bitIsActivo_CVA] DEFAULT ((1)) FOR [bitIsActivo];


GO
PRINT N'Creating [agr].[DF_GUIDCliente_CLI]...';


GO
ALTER TABLE [agr].[CLIENTE]
    ADD CONSTRAINT [DF_GUIDCliente_CLI] DEFAULT (newid()) FOR [varGUIDCliente];


GO
PRINT N'Creating [agr].[DF_dttFecAlta_CLI]...';


GO
ALTER TABLE [agr].[CLIENTE]
    ADD CONSTRAINT [DF_dttFecAlta_CLI] DEFAULT (getdate()) FOR [sdtFecAlta];


GO
PRINT N'Creating [agr].[DF_bitIsActivo_CLI]...';


GO
ALTER TABLE [agr].[CLIENTE]
    ADD CONSTRAINT [DF_bitIsActivo_CLI] DEFAULT ((1)) FOR [bitIsActivo];


GO
PRINT N'Creating [agr].[FK_chrIdMoneda_REF]...';


GO
ALTER TABLE [agr].[REFERENCIA]
    ADD CONSTRAINT [FK_chrIdMoneda_REF] FOREIGN KEY ([chrIdMoneda]) REFERENCES [agr].[MONEDA] ([chrIdMoneda]);


GO
PRINT N'Creating [agr].[FK_intIdProcessControl_REF]...';


GO
ALTER TABLE [agr].[REFERENCIA]
    ADD CONSTRAINT [FK_intIdProcessControl_REF] FOREIGN KEY ([intIdProcessControl]) REFERENCES [agr].[PROCESSCONTROL] ([intIdProcessControl]);


GO
PRINT N'Creating [agr].[FK_sntIdCliente_REF]...';


GO
ALTER TABLE [agr].[REFERENCIA]
    ADD CONSTRAINT [FK_sntIdCliente_REF] FOREIGN KEY ([sntIdCliente]) REFERENCES [agr].[CLIENTE] ([sntIdCliente]);


GO
PRINT N'Creating [agr].[FK_sntIdEstablecimiento_REF]...';


GO
ALTER TABLE [agr].[REFERENCIA]
    ADD CONSTRAINT [FK_sntIdEstablecimiento_REF] FOREIGN KEY ([sntIdEstablecimiento]) REFERENCES [agr].[ESTABLECIMIENTO] ([sntIdEstablecimiento]);


GO
PRINT N'Creating [agr].[FK_tnyIdEstatus_REF]...';


GO
ALTER TABLE [agr].[REFERENCIA]
    ADD CONSTRAINT [FK_tnyIdEstatus_REF] FOREIGN KEY ([tnyIdEstatus]) REFERENCES [agr].[ESTATUS] ([tnyIdEstatus]);


GO
PRINT N'Creating [agr].[FK_intIdProcessControl_PRE]...';


GO
ALTER TABLE [agr].[PROCESSERROR]
    ADD CONSTRAINT [FK_intIdProcessControl_PRE] FOREIGN KEY ([intIdProcessControl]) REFERENCES [agr].[PROCESSCONTROL] ([intIdProcessControl]);


GO
PRINT N'Creating [agr].[FK_numIdValidacion_PRE]...';


GO
ALTER TABLE [agr].[PROCESSERROR]
    ADD CONSTRAINT [FK_numIdValidacion_PRE] FOREIGN KEY ([numIdValidacion]) REFERENCES [agr].[VALIDACION] ([numIdValidacion]);


GO
PRINT N'Creating [agr].[FK_tnyIdOrigen_PRO]...';


GO
ALTER TABLE [agr].[PROCESSCONTROL]
    ADD CONSTRAINT [FK_tnyIdOrigen_PRO] FOREIGN KEY ([tnyIdOrigen]) REFERENCES [agr].[ORIGEN] ([tnyIdOrigen]);


GO
PRINT N'Creating [agr].[FK_numIdValidacion_CVA]...';


GO
ALTER TABLE [agr].[CONFVALIDACIONES]
    ADD CONSTRAINT [FK_numIdValidacion_CVA] FOREIGN KEY ([numIdValidacion]) REFERENCES [agr].[VALIDACION] ([numIdValidacion]);


GO
PRINT N'Creating [agr].[FK_sntIdCliente_CVA]...';


GO
ALTER TABLE [agr].[CONFVALIDACIONES]
    ADD CONSTRAINT [FK_sntIdCliente_CVA] FOREIGN KEY ([sntIdCliente]) REFERENCES [agr].[CLIENTE] ([sntIdCliente]);


GO
PRINT N'Creating [agr].[FK_tnyIdNivel_CVA]...';


GO
ALTER TABLE [agr].[CONFVALIDACIONES]
    ADD CONSTRAINT [FK_tnyIdNivel_CVA] FOREIGN KEY ([tnyIdNivel]) REFERENCES [agr].[NIVEL] ([tnyIdNivel]);


GO
PRINT N'Creating [agr].[FK_sntIdEstablecimiento_CNE]...';


GO
ALTER TABLE [agr].[CONFIG_NIVEL_ESTABLECIMIENTO]
    ADD CONSTRAINT [FK_sntIdEstablecimiento_CNE] FOREIGN KEY ([sntIdEstablecimiento]) REFERENCES [agr].[ESTABLECIMIENTO] ([sntIdEstablecimiento]);


GO
PRINT N'Creating [agr].[FK_intIdConNivEstable_CCE]...';


GO
ALTER TABLE [agr].[CONFIG_COL_ESTABLECIMIENTO]
    ADD CONSTRAINT [FK_intIdConNivEstable_CCE] FOREIGN KEY ([intIdConNivEstable]) REFERENCES [agr].[CONFIG_NIVEL_ESTABLECIMIENTO] ([intIdConNivEstable]);


GO
PRINT N'Creating [agr].[FK_sntIdEstablecimiento_CCE]...';


GO
ALTER TABLE [agr].[CONFIG_COL_ESTABLECIMIENTO]
    ADD CONSTRAINT [FK_sntIdEstablecimiento_CCE] FOREIGN KEY ([sntIdEstablecimiento]) REFERENCES [agr].[ESTABLECIMIENTO] ([sntIdEstablecimiento]);


GO
PRINT N'Creating [agr].[FK_sntIdCliente_COC]...';


GO
ALTER TABLE [agr].[CONFIG_CLIENTE]
    ADD CONSTRAINT [FK_sntIdCliente_COC] FOREIGN KEY ([sntIdCliente]) REFERENCES [agr].[CLIENTE] ([sntIdCliente]);


GO
PRINT N'Creating [agr].[FK_sntIdConfiguracion_COC]...';


GO
ALTER TABLE [agr].[CONFIG_CLIENTE]
    ADD CONSTRAINT [FK_sntIdConfiguracion_COC] FOREIGN KEY ([sntIdConfiguracion]) REFERENCES [agr].[CONFIGURACION] ([sntIdConfiguracion]);


GO
PRINT N'Creating [dbo].[FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserClaims]
    ADD CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserLogins]
    ADD CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles]
    ADD CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[AspNetRoles] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles]
    ADD CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [agr].[fnCompCeroDifRef]...';


GO
CREATE FUNCTION agr.fnCompCeroDifRef
(@P_NumDifReferencia NUMERIC(20))
RETURNS VARCHAR(12)
AS
BEGIN

	DECLARE @V_Longitud INT,
			@V_DifNume NUMERIC,
			@V_Cant INT = 1,
			@V_Dif INT,
			@V_Cadena VARCHAR(10) = ''


	SET @V_Longitud = (SELECT CONVERT(INT,varValor) FROM agr.LVAL WHERE numIdLval = 16)
	
	 SET @V_Dif = (@V_Longitud - len(@P_NumDifReferencia))

	 WHILE @V_Cant <= @V_Dif
	 BEGIN

		SET @V_Cadena = @V_Cadena + '0'

		SET @V_Cant += 1

	 END

	RETURN @V_Cadena

END
GO
PRINT N'Creating [agr].[fnGeneraJson]...';


GO

 CREATE FUNCTION agr.fnGeneraJson
 (@P_IdReferencia numeric(15),
  @P_Opcion TINYINT)
  RETURNS NVARCHAR(MAX)
 AS
 BEGIN
	
	DECLARE @tbl_Ordeado AS TABLE (IdRegistro INT PRIMARY KEY IDENTITY(1,1), String VARCHAR(200))
	DECLARE @V_IdEstablecimiento smallint,
			@V_SQL NVARCHAR(MAX), 
			@V_Col VARCHAR(MAX), 
			@V_Cont INT = 1, 
			@V_Lim INT = 1,
			@V_IdNivel SMALLINT
		
	--1 - CREACIÓN DE TABLA
	--2 - CREACIÓN INSERT
	--3 - SELECT - INSERT
	--4 - SELECT RESULTADO

	SET @V_IdEstablecimiento = (SELECT sntIdEstablecimiento	FROM agr.REFERENCIA WHERE numIdReferencia = @P_IdReferencia)

	SET @V_SQL = CASE	
					 WHEN @P_Opcion = 1 THEN 'DECLARE @V_Json NVARCHAR(MAX)  CREATE TABLE #Formato (' 
					 WHEN @P_Opcion = 2 THEN 'INSERT INTO #Formato ('
					 WHEN @P_Opcion = 3 THEN 'SELECT '
					 WHEN @P_Opcion = 4 THEN 'SET @V_Json = (SELECT '
				 END

	INSERT INTO @tbl_Ordeado (String)
	SELECT CASE
			   WHEN @P_Opcion = 1 THEN ('[' + varColumna + '] ' + varTipoDato)
			   WHEN @P_Opcion IN (2, 4) THEN ('[' + varColumna + '] ')
			   WHEN @P_Opcion = 3 THEN varValor
			END
	FROM agr.CONFIG_COL_ESTABLECIMIENTO
	WHERE sntIdEstablecimiento = @V_IdEstablecimiento AND
		  intIdConNivEstable IS NULL
	ORDER BY tnyOrden
	
	SET @V_Col = (SELECT STRING_AGG(String, ', ') FROM @tbl_Ordeado)

	SET @V_SQL = @V_SQL + @V_Col + ','

	DELETE @tbl_Ordeado

	SET @V_Col = ''
	---------
	
	SET @V_Lim = (SELECT MAX(tnyNivel) FROM agr.CONFIG_NIVEL_ESTABLECIMIENTO WHERE sntIdEstablecimiento = @V_IdEstablecimiento)

	WHILE @V_Cont <= @V_Lim
	BEGIN

		SELECT @V_Col = Descrip,
			   @V_IdNivel = intIdConNivEstable
		FROM agr.CONFIG_NIVEL_ESTABLECIMIENTO 
		WHERE sntIdEstablecimiento = @V_IdEstablecimiento AND 
			  tnyNivel = @V_Cont

		 INSERT INTO @tbl_Ordeado (String)
		 SELECT CASE 
					 WHEN @P_Opcion = 1 THEN ('['+ @V_Col + varColumna + '] ' + varTipoDato)
					 WHEN @P_Opcion IN (2, 4) THEN ('['+ @V_Col + varColumna + '] ')
					 WHEN @P_Opcion = 3 THEN (varValor)
				END
		 FROM agr.CONFIG_COL_ESTABLECIMIENTO
		 WHERE sntIdEstablecimiento = @V_IdEstablecimiento AND
			   intIdConNivEstable = @V_IdNivel
		 ORDER BY intIdConNivEstable

		 SELECT @V_Col = STRING_AGG(String,', ')
		 FROM @tbl_Ordeado

		 SET @V_SQL = @V_SQL + @V_Col + ','

		 DELETE @tbl_Ordeado

		SET @V_Cont += 1
	END

	---------
	
	SET @V_SQL = LEFT(@V_SQL, LEN(@V_SQL) - 1)

	SET @V_SQL = @V_SQL + ' '

	SET @V_SQL = @V_SQL + CASE
							WHEN @P_Opcion IN (1,2) THEN ')'
							WHEN @P_Opcion = 3 THEN 'FROM agr.REFERENCIA AS REF 
								   INNER JOIN agr.ESTABLECIMIENTO AS EST ON REF.sntIdEstablecimiento = EST.sntIdEstablecimiento
								   WHERE numIdReferencia = ' + CONVERT(VARCHAR(18),@P_IdReferencia)
							WHEN @P_Opcion = 4 THEN 'FROM #Formato FOR JSON PATH,INCLUDE_NULL_VALUES, WITHOUT_ARRAY_WRAPPER) 
													 SELECT @V_Json'
						  END

	RETURN @V_SQL

 END
GO
PRINT N'Creating [agr].[fnCodValidacion]...';


GO

 CREATE FUNCTION agr.fnCodValidacion
 (@vcReference VARCHAR(16))
 RETURNS CHAR(1)
 AS
 BEGIN

	DECLARE @iNumber SMALLINT = 0, 
			@vcNumber CHAR(1) = '', 
			@iCont SMALLINT, 
			@iSum SMALLINT = 0, 
			@iChecker SMALLINT

	SET @iCont = LEN(@vcReference)

	WHILE 0 = 0
	BEGIN
		SET @iCont = @iCont - 1

		SET @vcNumber = RIGHT(@vcReference,1)

		SET @iNumber = @vcNumber

		IF @vcNumber = ''
		BEGIN
			BREAK
		END

		IF (@iCont % 2) = 0
		BEGIN
			SET @iNumber = @iNumber * 2

			IF @iNumber > 9
			BEGIN
				SET @iNumber = @iNumber - 9
			END

		END

		SET @iSum = @iSum + @iNumber

		SET @vcReference = LEFT(@vcReference,@iCont)
			
	END

	SET @iChecker = (10 - (@iSum % 10))

	IF @iChecker = 10
	BEGIN
		SET @iChecker = 0
	END

	RETURN @iChecker

 END
GO
PRINT N'Creating [agr].[fnGeneraDifReferencia]...';


GO
CREATE FUNCTION [agr].[fnGeneraDifReferencia]
(@P_RAND FLOAT)
RETURNS NUMERIC(20)
AS
BEGIN
	DECLARE @V_DifReferencia NUMERIC(20),
		@V_Cont INT = 1	

	DECLARE @tbl_DifReferencia AS TABLE (IdRegistro INT PRIMARY KEY IDENTITY(1,1), DifReferencia NUMERIC(15))
	DECLARE @V_Cadena VARCHAR(10),
			@V_Valido BIT = 0

		WHILE @V_Valido <> 1
		BEGIN
			
			SET @V_DifReferencia = (@P_RAND * 1000000000000000)

			SET @V_Cadena = (SELECT agr.fnCompCeroDifRef (@V_DifReferencia))
		
			SET @V_DifReferencia = CONCAT(@V_DifReferencia, @V_Cadena)

			INSERT INTO @tbl_DifReferencia (DifReferencia)
			SELECT numDifReferencia
			FROM agr.REFERENCIA

			SET @V_Valido = (SELECT CASE 
									   WHEN COUNT(*) > 0 THEN 0 
									   ELSE 1
									END
							 FROM agr.REFERENCIA
							 WHERE numDifReferencia = @V_DifReferencia)


		END
	
		RETURN @V_DifReferencia

END
GO
PRINT N'Creating [agr].[fnFormatoJsonConsulta]...';


GO

CREATE FUNCTION [agr].[fnFormatoJsonConsulta]
(@P_IdRegistro INT)
RETURNS @tbl_Json TABLE (IdRegistro INT PRIMARY KEY IDENTITY(1,1), IdReferencia NUMERIC(15))
AS
BEGIN

	DECLARE @json NVARCHAR(MAX)

	SET @json = (SELECT nvarJSON FROM agr.PROCESSCONTROL WITH(NOLOCK) WHERE intIdProcessControl = @P_IdRegistro)
	
	INSERT INTO @tbl_Json (IdReferencia)
	SELECT *
	FROM OPENJSON(@json)
	WITH(ReferenceId NUMERIC(15) 'strict $.ReferenceId')

	RETURN
END
GO
PRINT N'Creating [agr].[fnFormatoJson]...';


GO

 CREATE FUNCTION agr.fnFormatoJson
 (@P_IdRegistro INT)
 RETURNS @tbl_Json TABLE (IdRegistro INT PRIMARY KEY IDENTITY(1,1), ExpiryDate VARCHAR(20), CurrencyCode VARCHAR(4), Amount DECIMAL(8,2), TransactionId NUMERIC(32), GUIDClient VARCHAR(46), BeneficiaryId VARCHAR(26), EstablecimientoId SMALLINT,
						  INDEX IX_NC_X1 NONCLUSTERED (GUIDClient))
 AS
 BEGIN
	
	DECLARE @json NVARCHAR(MAX)
	
	SET @json = (SELECT nvarJSON FROM agr.PROCESSCONTROL WITH(NOLOCK) WHERE intIdProcessControl = @P_IdRegistro)

	INSERT INTO @tbl_Json (ExpiryDate, CurrencyCode, Amount, TransactionId, GUIDClient, BeneficiaryId, EstablecimientoId)
	SELECT IIF(TRY_CAST(ExpiryDate AS SMALLDATETIME) IS NULL, ExpiryDate, IIF (CONVERT(SMALLDATETIME,ExpiryDate) = '1900-01-01 00:00:00', NULL,ExpiryDate)) AS ExpiryDate,
		   CurrencyCode, 
		   Amount, 
		   TransactionId, 
		   GUIDClient, 
		   BeneficiaryId, 
		   EstablecimientoId
	FROM OPENJSON(@json)
	WITH(ExpiryDate VARCHAR(20) 'strict $.ExpiryDate',
	     CurrencyCode VARCHAR(4) 'strict $.CurrencyCode',
		 Amount DECIMAL(8,2) 'strict $.Amount',
		 TransactionId NUMERIC(32) 'strict $.TransactionId',
		 GUIDClient VARCHAR(46) 'strict $.GUIDClient',
		 BeneficiaryId VARCHAR(26) 'strict $.BeneficiaryId',
		 EstablecimientoId SMALLINT 'strict $.EstablecimientoId')
	
	RETURN

 END
GO
PRINT N'Creating [agr].[fnFormatoJson].[IX_NC_X1]...';


GO
PRINT N'Creating [swt].[fnFormatoJsonCargo]...';


GO

CREATE FUNCTION swt.fnFormatoJsonCargo
(@P_IdRegistro INT)
RETURNS @tbl_Json TABLE (IdRegistro TINYINT PRIMARY KEY IDENTITY (1,1), Plaza VARCHAR(10), Tienda VARCHAR(10),  FechaCentral SMALLDATETIME, fechaAdmin DATE, FechaPOS SMALLDATETIME, Referencia NUMERIC(16),
						 Monto DECIMAL(8,2), Caja VARCHAR(2), Operador VARCHAR(16), FolioWm NUMERIC(10), EntryMode VARCHAR(5), Currency VARCHAR(5), tiendaFronteriza VARCHAR(5), att1 VARCHAR(10), att3 VARCHAR(10), 
						 idNegocio VARCHAR(5), stan NUMERIC(10), INDEX IX_X1 CLUSTERED (Referencia))
AS
BEGIN

	DECLARE @json NVARCHAR(MAX)

	SET @json = (SELECT nvarJSON FROM agr.PROCESSCONTROL WITH(NOLOCK) WHERE intIdProcessControl = @P_IdRegistro)
		
	INSERT INTO @tbl_Json (Plaza, Tienda, FechaCentral, fechaAdmin, FechaPOS, Referencia, Monto, Caja, Operador, FolioWm, EntryMode, Currency, tiendaFronteriza, att1, att3, idNegocio, stan)
	SELECT crPlaza,
		   crTienda,
		   CONVERT(SMALLDATETIME, fechaCentral) AS fechaCentral,
		   CONVERT(DATE,fechaAdmin) AS fechaAdmin,
		   CONVERT(SMALLDATETIME, fechaPOS) AS fechaPOS,
		   referencia,
		   monto,
		   caja,
		   operador,
		   folioWm,
		   entryMode,
		   currency,
		   tiendaFronteriza,
		   IIF(att1 = '', NULL, att1) AS att1,
		   IIF(att3 = '', NULL, att3) AS att3,
		   idNegocio,
		   stan
	FROM OPENJSON(@json)
	WITH(crPlaza VARCHAR(10) 'strict $.crPlaza',
		 crTienda VARCHAR(10) 'strict $.crTienda',
		 fechaCentral VARCHAR(20) 'strict $.fechaCentral',
		 fechaAdmin VARCHAR(10) 'strict $.fechaAdmin',
		 fechaPOS VARCHAR(20) 'strict $.fechaPOS',
		 referencia NUMERIC(16) 'strict $.referencia',
		 monto DECIMAL(8,2) 'strict $.monto',
		 caja VARCHAR(2) 'strict $.caja',
		 operador VARCHAR(16) 'strict $.operador',
		 folioWm NUMERIC(10) 'strict $.folioWm',
		 entryMode VARCHAR(5) 'strict $.entryMode',
		 currency VARCHAR(5) 'strict $.currency',
		 tiendaFronteriza VARCHAR(5) 'strict $.tiendaFronteriza',
		 att1 VARCHAR(10) 'strict $.att1',
		 att3 VARCHAR(10) 'strict $.att3',
		 idNegocio VARCHAR(5) 'strict $.idNegocio',
		 stan NUMERIC(10) 'strict $.stan'
		 )

	RETURN 

END
GO
PRINT N'Creating [swt].[fnFormatoJsonCargo].[IX_X1]...';


GO
PRINT N'Creating [agr].[spObtenerDatosAPIClient]...';


GO
CREATE PROC [agr].[spObtenerDatosAPIClient]
(@IdProcessControl NUMERIC(15))
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @NoReferencia NUMERIC(16)

	SET @NoReferencia = (SELECT Referencia FROM swt.fnFormatoJsonCargo(@IdProcessControl))


	SELECT CLI.URLAPI, 
		   'Token' AS EPToken,
		   'api/OXXO/Auth/Success' AS EPAutoriza,
		   CLI.UserAPI,
		   CLI.PassAPI
	FROM agr.CLIENTE AS CLI
		INNER JOIN agr.REFERENCIA AS REF ON CLI.sntIdCliente = REF.sntIdCliente
	WHERE REF.numNoReferencia = @NoReferencia


	SET NOCOUNT OFF
END
GO
PRINT N'Creating [agr].[spGetValidaciones]...';


GO

CREATE PROC [agr].[spGetValidaciones]
(@P_Accion INT,
 @P_IdRegistro INT)
 AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @V_IdCliente SMALLINT,
			@V_ScriptSQL Nvarchar(MAX)

	IF @P_Accion IN (1,2)
	BEGIN

		--1	Validaciones Generales Agregador
		--2	Validaciones Por Cliente Agregador

		SET @V_IdCliente = (SELECT CLI.sntIdCliente 
							FROM agr.fnFormatoJson (@P_IdRegistro) AS JSO 
								INNER JOIN agr.CLIENTE AS CLI ON JSO.GUIDClient = CLI.varGUIDCliente)


		SET @V_ScriptSQL = 'SELECT CON.numIdValidacion,
								   CON.varScriptSQL,
								   VAL.chrCodError
							FROM agr.CONFVALIDACIONES AS CON
								INNER JOIN agr.VALIDACION AS VAL ON CON.numIdValidacion = VAL.numIdValidacion
							WHERE tnyIdNivel = ' + CONVERT(VARCHAR(5),@P_Accion) + 'AND ' + 
							CASE 
								 WHEN @P_Accion = 2 THEN 'CON.sntIdCliente = ' + CONVERT(VARCHAR(5),@V_IdCliente) + ' AND '
								 WHEN @P_Accion = 1 THEN ''
							END + 
							' bitIsActivo = 1'

		EXEC SP_EXECUTESQL @V_ScriptSQL

	END

	ELSE IF @P_Accion IN (3, 4)
	BEGIN
		--3	Validaciones Generales Cobro
		--4	Validaciones Por Cliente Cobro

		SET @V_IdCliente = (SELECT REF.sntIdCliente 
							FROM swt.fnFormatoJsonCargo(@P_IdRegistro) AS JSO
								 INNER JOIN agr.REFERENCIA AS REF ON REF.numNoReferencia = JSO.Referencia AND 
																	 REF.tnyIdEstatus = 1)

		SET @V_ScriptSQL = 'SELECT CON.numIdValidacion,
								   CON.varScriptSQL,
								   VAL.chrCodError
							FROM agr.CONFVALIDACIONES AS CON
								INNER JOIN agr.VALIDACION AS VAL ON CON.numIdValidacion = VAL.numIdValidacion
							WHERE tnyIdNivel = ' + CONVERT(VARCHAR(5),@P_Accion) + 'AND ' +
							CASE
								WHEN @P_Accion = 4 THEN 'CON.sntIdCliente = ' + CONVERT(VARCHAR(5),@V_IdCliente) + ' AND '
								WHEN @P_Accion = 3 THEN ''
							END + 
							' bitIsActivo = 1'

		EXEC SP_EXECUTESQL @V_ScriptSQL
		
	END

	--ELSE IF @P_Accion IN (5,6)
	--BEGIN
		--5	Validaciones Generales Reversa
		--6	Validaciones Por Cliente Reversa
	--END

	ELSE IF @P_Accion IN (7, 8)
	BEGIN
		--7	Validaciones Generales Consulta
		--8	Validaciones Por Cliente Consulta
		
		SET @V_IdCliente = (SELECT REF.sntIdCliente 
							FROM [agr].[fnFormatoJsonConsulta] (@P_IdRegistro) AS JSO 
								INNER JOIN agr.REFERENCIA AS REF ON JSO.IdReferencia = REF.numDifReferencia)

		SET @V_ScriptSQL = 'SELECT CON.numIdValidacion,
								   CON.varScriptSQL,
								   VAL.chrCodError
							FROM agr.CONFVALIDACIONES AS CON
								INNER JOIN agr.VALIDACION AS VAL ON CON.numIdValidacion = VAL.numIdValidacion
							WHERE tnyIdNivel = ' + CONVERT(VARCHAR(5),@P_Accion) + 'AND ' +
							CASE
								WHEN @P_Accion = 8 THEN 'CON.sntIdCliente = ' + CONVERT(VARCHAR(5),@V_IdCliente) + ' AND '
								WHEN @P_Accion = 7 THEN ''
							END + 
							' bitIsActivo = 1'

		EXEC SP_EXECUTESQL @V_ScriptSQL

	END

	SET NOCOUNT OFF
END
GO
PRINT N'Creating [agr].[spGeneraReferencia]...';


GO

CREATE PROC agr.spGeneraReferencia
(@P_IdRegistro INT,
 @P_NoReferencia NUMERIC(16) OUTPUT)
 AS
 BEGIN
	SET NOCOUNT ON
	
	DECLARE @V_NoReferencia NUMERIC(16),
			@V_FolioReferencia VARCHAR(8)

	--CONSULTAR EL FOLIO EN EL QUE VA
	SET @V_FolioReferencia = (SELECT varValor FROM [agr].[LVAL] WHERE numIdLval = 6)

	SELECT @V_NoReferencia = CONCAT(EST.intNoSocio,@V_FolioReferencia, FORMAT(CONVERT(INT,LEFT(REPLACE(CONVERT(VARCHAR(12), JSO.Amount),'.',''),LEN(REPLACE(CONVERT(VARCHAR(12), JSO.Amount),'.','')) - 1)),'00000'))
	FROM agr.fnFormatoJson (@P_IdRegistro) AS JSO
		INNER JOIN agr.ESTABLECIMIENTO AS EST ON JSO.EstablecimientoId = EST.sntIdEstablecimiento

	SET @V_NoReferencia = CONCAT(@V_NoReferencia, agr.fnCodValidacion(@V_NoReferencia))
	
	SET @P_NoReferencia = @V_NoReferencia

	SET @V_FolioReferencia = FORMAT(IIF((@V_FolioReferencia + 1) > 9999999, 1, (@V_FolioReferencia + 1)) ,'0000000')
	
	--ACTUALIZAR FOLIO RANDOM
	UPDATE agr.LVAL SET varValor = @V_FolioReferencia 
	WHERE numIdLval = 6

	SET NOCOUNT OFF
 END
GO
PRINT N'Creating [agr].[spEnviaErrorJson]...';


GO

CREATE PROC agr.spEnviaErrorJson
(@P_IdRegistro INT)
AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @tbl_Retorno AS TABLE (Success VARCHAR(10), Code CHAR(2), [Message]	VARCHAR(120))

	INSERT INTO @tbl_Retorno (Success, Code, [Message])
	SELECT TOP 1 'False',
		   chrCodError,
		   varMensaje
	FROM agr.PROCESSERROR
	WHERE intIdProcessControl = @P_IdRegistro
	ORDER BY intIdProcessError ASC

	SELECT *
	FROM @tbl_Retorno
	FOR JSON PATH,INCLUDE_NULL_VALUES, WITHOUT_ARRAY_WRAPPER

	SET NOCOUNT OFF
END
GO
PRINT N'Creating [agr].[spValGenerales]...';


GO

CREATE PROC agr.spValGenerales
 (@P_Accion INT,
  @P_IdRegistro INT)
 AS
 BEGIN
	SET NOCOUNT ON
	
	--EN EL PARAMETRO @P_Accion SOLAMENTE SE PUEDE RECIBIR 1 Y 2
	DECLARE @tbl_Validaciones AS TABLE (IdRegistro INT PRIMARY KEY IDENTITY (1,1), NumValidacion INT, ScriptSQL varchar(MAX), CodError CHAR(2))
	DECLARE	@tbl_RESVALI AS TABLE (Mensaje VARCHAR(280) INDEX IX_NC_X1 NONCLUSTERED (Mensaje))
	DECLARE	@tbl_RESULTADO AS TABLE (IdRegistro INT PRIMARY KEY IDENTITY(1,1), NumValidacion INT, Mensaje VARCHAR(280), CodError CHAR(2))
	DECLARE @V_Cont INT = 1,
			@V_Limite INT,
			@V_NumValidacion INT,
			@V_ScriptSQL Nvarchar(MAX),
			@V_CodError CHAR(2)

	--EXTRACCIÓN DE VALIDACIONES
	INSERT INTO @tbl_Validaciones (NumValidacion, ScriptSQL, CodError)
	EXEC [agr].spGetValidaciones @P_Accion = @P_Accion,
								 @P_IdRegistro = @P_IdRegistro

	-- EJECUCIÓN DE VALIDACION POR NIVEL Y CLIENTE
	SET @V_Limite = (SELECT COUNT(*) FROM @tbl_Validaciones)

	WHILE @V_Cont <= (@V_Limite)
	BEGIN
		
		SELECT @V_NumValidacion = NumValidacion,
			   @V_ScriptSQL = ScriptSQL,
			   @V_CodError = CodError
		FROM @tbl_Validaciones 
		WHERE IdRegistro = @V_Cont

		INSERT INTO @tbl_RESVALI (Mensaje)
		EXEC SP_EXECUTESQL @statement = @V_ScriptSQL,
						   @params = N'@IdRegistro INT',
						   @IdRegistro = @P_IdRegistro

		INSERT INTO @tbl_RESULTADO (NumValidacion, Mensaje, CodError)
		SELECT @V_NumValidacion,
				Mensaje,
				@V_CodError
		FROM @tbl_RESVALI

		DELETE @tbl_RESVALI

		SET @V_Cont += 1
	END

	INSERT INTO agr.PROCESSERROR (intIdProcessControl, numIdValidacion, varMensaje, chrCodError)
	SELECT @P_IdRegistro,
			NumValidacion,
			Mensaje,
			CodError
	FROM @tbl_RESULTADO

	SET NOCOUNT OFF
 END
GO
PRINT N'Creating [agr].[spActualizaFormatoJson]...';


GO

CREATE PROC agr.spActualizaFormatoJson
(@P_IdReferencia NUMERIC(15))
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @tbl_Resul AS TABLE (IdRegistro INT PRIMARY KEY IDENTITY(1,1), FormatoJSON NVARCHAR(MAX))
	DECLARE @V_ScriptSQL NVARCHAR(MAX) = ''

	SET @V_ScriptSQL = agr.fnGeneraJson (@P_IdReferencia,1)
	SET @V_ScriptSQL = @V_ScriptSQL + agr.fnGeneraJson (@P_IdReferencia,2)
	SET @V_ScriptSQL = @V_ScriptSQL + agr.fnGeneraJson (@P_IdReferencia,3)
	SET @V_ScriptSQL = @V_ScriptSQL + agr.fnGeneraJson (@P_IdReferencia,4)

	INSERT INTO @tbl_Resul (FormatoJSON)
	EXEC SP_EXECUTESQL @V_ScriptSQL

	UPDATE agr.REFERENCIA SET varJSON = (SELECT FormatoJSON FROM @tbl_Resul)
	WHERE numIdReferencia = @P_IdReferencia

	SET NOCOUNT OFF
END
GO
PRINT N'Creating [agr].[spInsertReferencia]...';


GO

CREATE PROC [agr].[spInsertReferencia]
(@P_IdRegistro INT)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @V_NoReferencia NUMERIC(16),
			@V_IdReferencia	NUMERIC(15),
			@V_ScriptSQL NVARCHAR(MAX),
			@V_IdEstablecimiento SMALLINT
	 
	EXEC [agr].[spGeneraReferencia] @P_IdRegistro = @P_IdRegistro, 
									@P_NoReferencia = @V_NoReferencia OUTPUT

	SET @V_IdEstablecimiento = (SELECT EstablecimientoId FROM agr.fnFormatoJson (@P_IdRegistro))

	 INSERT INTO agr.REFERENCIA (intIdProcessControl, numDifReferencia, numNoTransaccion, chrIdMoneda, sntIdEstablecimiento, sntIdCliente, varNoBeneficiario, decMonto, numNoReferencia, sdtFecExpiracion, sdtFecRegistro, varURLQR, varJSON, tnyIdEstatus)
	 SELECT @P_IdRegistro,
			agr.fnGeneraDifReferencia(RAND()),
			JSO.TransactionId,
			JSO.CurrencyCode,
			JSO.EstablecimientoId,
			CLI.sntIdCliente,
			JSO.BeneficiaryId,
			JSO.Amount,
			@V_NoReferencia AS numNoReferencia,
			CASE
				WHEN JSO.ExpiryDate IS NULL THEN DATEADD(HOUR,CONVERT(INT,CCL.varValor),GETDATE())
				ELSE JSO.ExpiryDate
			END,
			GETDATE(),
			NULL AS [URL],
			NULL AS [JSON],
			1 AS IdEstatus
	 FROM agr.fnFormatoJson (@P_IdRegistro) AS JSO
		INNER JOIN agr.CLIENTE AS CLI ON JSO.GUIDClient = CLI.varGUIDCliente
		LEFT JOIN (SELECT sntIdCliente,
						  varValor
				   FROM [agr].[CONFIG_CLIENTE]
				   WHERE sntIdConfiguracion = 3) AS CCL ON CLI.sntIdCliente = CCL.sntIdCliente
		
	 SET @V_IdReferencia = SCOPE_IDENTITY()
	 
	 --ACTUALIZA EL FORMATO JSON QUE SE GUARDA EN LA TABLA
	 EXEC [agr].[spActualizaFormatoJson] @P_IdReferencia = @V_IdReferencia

	SELECT varJSON
	FROM agr.REFERENCIA
	WHERE numIdReferencia = @V_IdReferencia

	SET NOCOUNT OFF
END
GO
PRINT N'Creating [agr].[spExpiraReferencia]...';


GO

CREATE PROC agr.spExpiraReferencia
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @tbl_Referencia AS TABLE (IdRegistro INT PRIMARY KEY IDENTITY(1,1), IdReferencia NUMERIC(15))
	DECLARE @V_IdReferencia NUMERIC(15),
		@V_Cont INT = 1,
		@V_Lim INT

	INSERT INTO @tbl_Referencia (IdReferencia)
	SELECT numIdReferencia
	FROM agr.REFERENCIA WITH(NOLOCK)
	WHERE tnyIdEstatus = 1 AND
		  sdtFecExpiracion < CONVERT(SMALLDATETIME,GETDATE())

	IF (SELECT COUNT(*) FROM @tbl_Referencia) > 0 
	BEGIN

		UPDATE REF SET REF.tnyIdEstatus = 2
		FROM agr.REFERENCIA AS REF WITH(NOLOCK)
			INNER JOIN @tbl_Referencia AS TRE ON REF.numIdReferencia = TRE.IdReferencia

		SET @V_Lim = (SELECT COUNT(*) FROM @tbl_Referencia)

		WHILE @V_Cont <= @V_Lim
		BEGIN
		
			SET @V_IdReferencia = (SELECT IdReferencia FROM @tbl_Referencia WHERE IdRegistro = @V_Cont)

			EXEC agr.spActualizaFormatoJson @P_IdReferencia = @V_IdReferencia

			SET @V_Cont+= 1
		END

	END

	SET NOCOUNT OFF
END
GO
PRINT N'Creating [agr].[spConsulReferencia]...';


GO

CREATE PROC [agr].[spConsulReferencia]
(@P_json NVARCHAR(MAX))
AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @V_IdRegistro INT, 
			@V_Sucess BIT = 0,
			@V_ReferenceId NUMERIC(15)

	--EXPIRACIÓN DE REFERENCIA
	EXEC agr.spExpiraReferencia
	
	INSERT INTO agr.PROCESSCONTROL (nvarJSON, tnyIdOrigen)
							VALUES (@P_json, 4)

	SET @V_IdRegistro = SCOPE_IDENTITY()

	--VALIDACIONES GENERALES
	EXEC agr.spValGenerales @P_Accion = 7,
							@P_IdRegistro = @V_IdRegistro

	IF NOT EXISTS (SELECT TOP 1 1 FROM agr.PROCESSERROR WHERE intIdProcessControl = @V_IdRegistro)
	BEGIN

		--VALIDACIONES GENERALES
		EXEC agr.spValGenerales @P_Accion = 8,
								@P_IdRegistro = @V_IdRegistro
		
			--VALIDACIONES POR CLIENTE
		IF NOT EXISTS (SELECT TOP 1 1 FROM agr.PROCESSERROR WITH(NOLOCK) WHERE intIdProcessControl = @V_IdRegistro)
		BEGIN

			SET @V_Sucess = 1

		END

	END

	IF @V_Sucess = 1 
	BEGIN
		
		SET @V_ReferenceId = (SELECT REF.numIdReferencia 
							  FROM agr.fnFormatoJsonConsulta(@V_IdRegistro) AS JSO
								INNER JOIN agr.REFERENCIA AS REF ON JSO.IdReferencia = REF.numDifReferencia)

		EXEC agr.spActualizaFormatoJson @P_IdReferencia = @V_ReferenceId

		SELECT varJSON
		FROM agr.REFERENCIA
		WHERE numIdReferencia = @V_ReferenceId

	END
	ELSE
	BEGIN
			
		--GENERAR JSON DE ERROR
		EXEC agr.spEnviaErrorJson @P_IdRegistro = @V_IdRegistro

	END

	SET NOCOUNT OFF
END
GO
PRINT N'Creating [swt].[spPagoReferencia]...';


GO

CREATE PROC [swt].[spPagoReferencia]
(@P_json NVARCHAR(MAX))
AS
BEGIN
	SET NOCOUNT ON

		DECLARE @V_IdRegistro INT, 
				@V_Sucess BIT = 0
		
		--EXPIRAR REFERENCIAS
		EXEC [agr].[spExpiraReferencia]


		INSERT INTO agr.PROCESSCONTROL (nvarJSON, tnyIdOrigen)
								VALUES (@P_json, 2)

		SET @V_IdRegistro = SCOPE_IDENTITY()

		--VALIDACIONES POR CLIENTE
		EXEC agr.spValGenerales @P_Accion = 3, 
							    @P_IdRegistro = @V_IdRegistro

		IF NOT EXISTS(SELECT TOP 1 1 FROM agr.PROCESSERROR WHERE intIdProcessControl = @V_IdRegistro)
		BEGIN

			--VALIDACIONES POR CLIENTE
			EXEC agr.spValGenerales @P_Accion = 4,
									  @P_IdRegistro = @V_IdRegistro

			IF NOT EXISTS(SELECT TOP 1 1 FROM agr.PROCESSERROR WHERE intIdProcessControl = @V_IdRegistro)
			BEGIN
				SET @V_Sucess = 1
			END

		END

		IF @V_Sucess = 1 
		BEGIN

			--RETORNO DE EXITO
			SELECT '00' AS chrCodError,
				   'OK' AS varMensaje,
				   @V_IdRegistro AS NoTransaccion

		END
		ELSE 
		BEGIN

			--RETORNO DE ERROR
			SELECT TOP 1 chrCodError,
				   varMensaje,
				   @V_IdRegistro AS NoTransaccion
			FROM [agr].[PROCESSERROR]
			WHERE intIdProcessControl = @V_IdRegistro

		END

	SET NOCOUNT OFF

END
GO
PRINT N'Creating [agr].[spObtenerReferencia]...';


GO

CREATE PROC agr.spObtenerReferencia
(@P_json NVARCHAR(MAX))
AS
 BEGIN

	SET NOCOUNT ON

	DECLARE @V_IdRegistro INT, 
			@V_Sucess BIT = 0

	INSERT INTO agr.PROCESSCONTROL (nvarJSON, tnyIdOrigen)
							VALUES (@P_json, 1)

	SET @V_IdRegistro = SCOPE_IDENTITY()

	--VALIDACIONES GENERALES
	EXEC agr.spValGenerales @P_Accion = 1,
							@P_IdRegistro = @V_IdRegistro

	IF NOT EXISTS (SELECT TOP 1 1 FROM agr.PROCESSERROR WITH(NOLOCK) WHERE intIdProcessControl = @V_IdRegistro)
	BEGIN
			
		--VALIDACIONES POR CLIENTE
		EXEC agr.spValGenerales @P_Accion = 2, 
								@P_IdRegistro = @V_IdRegistro

		--VALIDACIONES POR CLIENTE
		IF NOT EXISTS (SELECT TOP 1 1 FROM agr.PROCESSERROR WITH(NOLOCK) WHERE intIdProcessControl = @V_IdRegistro)
		BEGIN
			
			SET @V_Sucess = 1

		END
		
	END

	IF @V_Sucess = 1 
	BEGIN

		--GENERACIÓN DE REFERENCIA
		EXEC agr.spInsertReferencia @P_IdRegistro = @V_IdRegistro

	END
	ELSE
	BEGIN
			
		--GENERAR JSON DE ERROR
		EXEC agr.spEnviaErrorJson @P_IdRegistro  = @V_IdRegistro
	END

	SET NOCOUNT OFF
 END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6586b9ef-65ed-43ef-bfb4-48cf9c88490a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6586b9ef-65ed-43ef-bfb4-48cf9c88490a')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
